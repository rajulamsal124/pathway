// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DecisionPoint {
  id               String              @id @default(cuid())
  title            String
  description      String?
  courses          Course[] // Added this line to establish the back relation
  courseCategories CourseCategory[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([title])
}

model CourseCategory {
  id              String           @id @default(cuid())
  title           String
  type            CategoryType 
  courses         Course[]
  decisionPointId String
  decisionPoint   DecisionPoint @relation(fields: [decisionPointId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Course {
  id                  String          @id @default(cuid())
  title               String          
  shortDescription    String
  description         String 
  level               String
  duration            String
  providerName        String?
  providerUrl         String?
  providerDescription String?
  courseCategoryId    String? 
  decisionPointId     String?
  decisionPoint       DecisionPoint? @relation(fields: [decisionPointId], references: [id])
  image               Bytes?
  category            CourseCategory? @relation(fields: [courseCategoryId], references: [id])
  roleId              String?
  role                CourseRole?          @relation(fields: [roleId], references: [id])
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @default(now()) @updatedAt

  @@unique([title])
}

model CourseRole {
  id        String      @id @default(cuid())
  rolesName String
  type      RoleType 
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RoleType {
  ONFARM
  OFFFARM
}

enum CategoryType {
  SCHOOLLEAVER
  CAREERCHANGER
  LIFELONGLEARNER
}
